using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NLiquid.Filters
{
	[FilterSource]
	public interface ArrayFilters
	{
		[Filter("join")]
		Join(val : array[string], delimiter : string): string;

		[Filter("join")]
		Join(val: array[double], delimiter: string): string;

		[Filter("join")]
		Join(val : array[int], delimiter : string): string;

		[Filter("join")]
		Join(val : array[bool], delimiter : string): string;

		[Filter("join")]
		Join(val : array[object], delimiter : string): string;


		[Filter("split")]
		Split(val : string, delimiter : string): array[string];


		[Filter("limit")]
		Limit(val : array[string], limit : int): array[string];

		[Filter("limit")]
		Limit(val : array[double], limit : int): array[double];

		[Filter("limit")]
		Limit(val : array[int], limit : int): array[int];

		[Filter("limit")]
		Limit(val : array[bool], limit : int): array[bool];

		[Filter("limit")]
		Limit(val : array[object], limit : int): array[object];


		[Filter("offset")]
		Offset(val : array[string], offset : int): array[string];

		[Filter("offset")]
		Offset(val : array[double], offset : int): array[double];

		[Filter("offset")]
		Offset(val : array[int], offset : int): array[int];

		[Filter("offset")]
		Offset(val : array[bool], offset : int): array[bool];

		[Filter("offset")]
		Offset(val : array[object], offset : int): array[object];


		[Filter("reversed")]
		Reversed(val : array[string]): array[string];

		[Filter("reversed")]
		Reversed(val : array[double]): array[double];

		[Filter("reversed")]
		Reversed(val : array[int]): array[int];

		[Filter("reversed")]
		Reversed(val : array[bool]): array[bool];

		[Filter("reversed")]
		Offset(val : array[object]): array[object];
	}
}
