using Nemerle;
//using Nemerle.Linq;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using System.Collections.Immutable;

using Nitra;
using Nitra.Declarations;

using NLiquid;
using NLiquid.Parser;
using NLiquid.Parser.Ast;

namespace NLiquid.Filters
{
  public class FilterTypes
  {
    public Filters: ImmutableArray[FunSymbol];
    
    public this(filters: ImmutableArray[FunSymbol])
    {
        Filters = filters;
    }
    public static Create(scope: TableScope, globalTypes: NLiquidGlobalTypes): FilterTypes
    {
      def builder       = ImmutableArray.CreateBuilder.[FunSymbol]();
      def filterMethods = LoadFilterMethods();
      
      foreach (filterMethod in filterMethods)
        builder.Add(CreateFilterSymbol(filterMethod, scope, globalTypes));
      
      def filters = builder.ToImmutable();
      FilterTypes(filters);
    }
    
    // laod filter functions marked with FilterAttribute 
    static LoadFilterMethods(): ImmutableArray[MethodInfo]
    {
      def builder = ImmutableArray.CreateBuilder.[MethodInfo]();
      
      foreach (filterType in Assembly.GetExecutingAssembly().GetTypes().Where(type => type.IsClass && type.GetCustomAttribute.[FilterContainerAttribute]() != null))
		  foreach (method in filterType.GetMethods(BindingFlags.Public | BindingFlags.Static))
			{
				builder.Add(method);			  
			}
			
			builder.ToImmutable();      
    }
    
    // create funsymbol from memberinfo of filter
    static CreateFilterSymbol(method: MethodInfo, scope: TableScope, globalTypes: NLiquidGlobalTypes): FunSymbol
    {
      def filterAttribute = method.GetCustomAttribute.[FilterAttribute]();
      def filterName      = filterAttribute?.Name ?? method.Name;
      def symbol          = Helpers.DefineSymbol.[FunSymbol](filterName, scope);
      def parameters      = method.GetParameters().Select(p => Helpers.CreateTypeSymbol(p.ParameterType, globalTypes)).ToImmutableArray();
      def returnType      = Helpers.CreateTypeSymbol(method.ReturnType, globalTypes);
      
			symbol.Parameters = parameters;
			symbol.Result     = returnType;
			
			symbol;
    }
  }
}
