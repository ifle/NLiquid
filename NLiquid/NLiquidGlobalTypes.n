using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.Runtime;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using NLiquid.Parser.Ast;

namespace NLiquid
{
	public class NLiquidGlobalTypes
	{
		public Nil               : NilSymbol;
		public Double            : DoubleSymbol;
		public Int               : IntSymbol;
		public Boolean           : BooleanSymbol;
		public String            : StringSymbol;
		public Object            : UserDefinedTypeSymbol;
		public Array             : ArraySymbol;
		public Dictionary        : DictionarySymbol;
		public Types             : ImmutableArray[DeclarationSymbol];
		public DotNetTypesMap    : Dictionary[TypeSymbol, System.Type] = Dictionary();
		_arrayElemTypeMap        : Dictionary[TypeSymbol, ArraySymbol] = Dictionary();

		_scope                    : TableScope;

		public this(scope: TableScope = null)
		{
			_scope     = scope;
			Nil        = Helpers.DefineSymbol.[NilSymbol]("nil", scope);
			Double     = Helpers.DefineSymbol.[DoubleSymbol]("double", scope);
			Int        = Helpers.DefineSymbol.[IntSymbol]("int", scope);
			Boolean    = Helpers.DefineSymbol.[BooleanSymbol]("bool", scope);
			String     = Helpers.DefineSymbol.[StringSymbol]("string", scope);
			Object     = Helpers.DefineSymbol.[UserDefinedTypeSymbol]("object", scope);
			Array      = Helpers.DefineSymbol.[ArraySymbol]("array", scope);
			Dictionary = Helpers.DefineSymbol.[DictionarySymbol]("dictionary", scope);

			def named   = array[Nil : DeclarationSymbol, Double, Int, Boolean, String, Object, Dictionary];

			// init dot net types
			DotNetTypesMap.Add(Double,  TryGetSystemType(Double));
			DotNetTypesMap.Add(Int,     TryGetSystemType(Int));
			DotNetTypesMap.Add(Boolean, TryGetSystemType(Boolean));
			DotNetTypesMap.Add(String,  TryGetSystemType(String));

			def builder = ImmutableArray.CreateBuilder(named.Length);
			builder.AddRange(named);

			Types = builder.MoveToImmutable();
		}

		public TryGetSymbol(type: System.Type) : TypeSymbol
		{
			match (System.Type.GetTypeCode(type))
			{
				| TypeCode.Boolean => this.Boolean
				| TypeCode.UInt64
				| TypeCode.Double  => this.Double
				| TypeCode.Byte
				| TypeCode.Int16
				| TypeCode.Int32
				| TypeCode.Int64
				| TypeCode.SByte
				| TypeCode.Single
				| TypeCode.UInt16
				| TypeCode.UInt32  => this.Int
				//| TypeCode.Decimal
				| TypeCode.Empty   => this.Nil
				| TypeCode.Char
				| TypeCode.String  => this.String
				| _                => null
			}
		}

		public TryGetSystemType(typeSymbol: TypeSymbol) : System.Type
		{
			match (typeSymbol)
			{
				| IntSymbol       => typeof(int)
				| DoubleSymbol    => typeof(double)
				| StringSymbol    => typeof(string)
				| BooleanSymbol   => typeof(bool)
				| BooleanSymbol   => typeof(bool)
				| _               => null
			}
		}

		public GetDotNetArrayType(itemTypeSymbol: TypeSymbol) : System.Type
		{
			match (itemTypeSymbol)
			{
				| IntSymbol             => System.Type.GetType("System.Int32[]")
				| DoubleSymbol          => System.Type.GetType("System.Double[]")
				| StringSymbol          => System.Type.GetType("System.String[]")
				| BooleanSymbol         => System.Type.GetType("System.Boolean[]")
				| UserDefinedTypeSymbol => System.Type.GetType("System.Object[]")
				| _                     => null
			}
		}

		public GetArrayType(elemType : TypeSymbol) : ArraySymbol
		{
			mutable arraySymbol;
			when(!_arrayElemTypeMap.TryGetValue(elemType, out arraySymbol))
			{
				arraySymbol = Helpers.DefineSymbol.[ArraySymbol]($"array[$(elemType.Name)]", _scope);
				arraySymbol.ElemType = elemType;
				_arrayElemTypeMap.Add(elemType, arraySymbol);
				// set .net array type
				def arrayDotNetType = GetDotNetArrayType(elemType);
				assert2(arrayDotNetType != null);
				when(arrayDotNetType != null)
					DotNetTypesMap.Add(arraySymbol, arrayDotNetType);
			}
			arraySymbol
		}

		public GetArrayElemType(arrayType : TypeSymbol) : TypeSymbol
		{
			match(arrayType)
			{
				| ArraySymbol as arr => arr.ElemType
				| _ => Nil
			}
		}
	}
}
