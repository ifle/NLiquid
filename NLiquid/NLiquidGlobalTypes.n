using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.Runtime;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using NLiquid.Parser.Ast;

namespace NLiquid
{
  public class NLiquidGlobalTypes
  {
    public Nil               : NilSymbol;
		public Double            : DoubleSymbol;
		public Int               : IntSymbol;
		public Boolean           : BooleanSymbol;
		public String            : StringSymbol;
		public Object            : ObjectSymbol;
		public Array             : ArraySymbol;
		public Dictionary        : DictionarySymbol;
		public Types             : ImmutableArray[DeclarationSymbol];

		_dictionary               : Dictionary[TypeSymbol, ArraySymbol] = Dictionary();
		_scope                    : TableScope;

		public this(scope: TableScope = null)
		{
		  _scope     = scope;
		  Nil        = Helpers.DefineSymbol.[NilSymbol]("nil", scope);
			Double     = Helpers.DefineSymbol.[DoubleSymbol]("double", scope);
			Int        = Helpers.DefineSymbol.[IntSymbol]("int", scope);
			Boolean    = Helpers.DefineSymbol.[BooleanSymbol]("bool", scope);
			String     = Helpers.DefineSymbol.[StringSymbol]("string", scope);
			Object     = Helpers.DefineSymbol.[ObjectSymbol]("object", scope);
			Array      = Helpers.DefineSymbol.[ArraySymbol]("array", scope);
			Dictionary = Helpers.DefineSymbol.[DictionarySymbol]("dictionary", scope);

			def named   = array[Nil : DeclarationSymbol, Double, Int, Boolean, String, Object, Dictionary];
			def builder = ImmutableArray.CreateBuilder(named.Length);
			builder.AddRange(named);

			Types = builder.MoveToImmutable();
		}

		public GetArrayType(elemType : TypeSymbol) : ArraySymbol
		{
			mutable arraySymbol;
		  when(!_dictionary.TryGetValue(elemType, out arraySymbol))
			{
			  arraySymbol = Helpers.DefineSymbol.[ArraySymbol]($"array[$(elemType.Name)]", _scope);
			  arraySymbol.ElemType = elemType;
			  _dictionary.Add(elemType, arraySymbol);
			}
			arraySymbol
		}
  }
}