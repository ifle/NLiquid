
namespace NLiquid.Parser
{
	[ExplicitSpaces]
	syntax module Grammar
	{
		using Nitra.Core;
		using Nitra.CStyleComments;
		using Nitra.Identifiers;

		keyword regex ['a'..'z', '_']+ rule S;

		extend token IgnoreToken
		{
			| SpaceToken = Spaces;
		}

		token Reference = IdentifierBody;
		token Name      = IdentifierBody;

		syntax Contents = Content*;

		syntax Content
		{
			| Atom
			| Plain = (!Atom Any)+
		}

		syntax Atom
		{
			| Tag
			| Output      = "{{" s sm OutputExpr s sm  "}}"
			| Assignment  = "{%" s sm "assign" s sm Name s sm "=" s sm FilteredExpr "%}"
		}

		syntax Tag
		{
		}

		// Следующее правило можно выбросить. Оно нужно для более качественного детектирования ошибок в случае, 
		// если пользователь накосячит с выражением.
		syntax OutputExpr
		{
			| FilteredExpr
			| Error = !(FilteredExpr s "}}") (!"}}" Any)+
		}

		syntax Expr
		{
			| Reference
			| SStr = "'" Value=(!"'" Any)* "'"
			| DStr = '"' Value=(!'"' Any)* '"'

			// сюда над добавить остальные выражения.

		precedence Primary:
			| MemberAccess =  Expr s "." s Reference
		}

		syntax FilteredExpr
		{
      | Expr
    precedence Filters:
      | Filter1 = FilteredExpr s sm "|" s sm Reference
      | Filter2 = FilteredExpr s sm "|" s sm Reference s ":" s sm Args=(Expr; s "," s sm; ?)*
		}
	}
}

