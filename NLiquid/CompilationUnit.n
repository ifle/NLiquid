using Nitra;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using System.Threading;

[assembly: ProjectSupport("Nitra Liquid", typeof(NLiquid.CompilationUnit))]

namespace NLiquid
{
  /// <summary>
  /// Description of CompilationUnit.
  /// </summary>
  public partial class CompilationUnit : AstBase, IProjectSupport
  {
    public RefreshReferences(cancellationToken : CancellationToken, project : Project) : object
    {
      null;
    //  (backEnd, context, rootNamespace)
    }
    
    public RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : object) : void
    {
    
    }

    public GetSymbolById(data : object, symbolId : int) : ValueOption[DeclarationSymbol]
    {
      ValueOption.None()
    }
    
    public DeconstructType(symbol : DeclarationSymbol, type : out TypeSymbol, typeArgs : out ImmutableArray[TypeSymbol]) : bool
    {
      false;
    }

    public VisitGlobalSymbols(data : object, callback : Predicate[DeclarationSymbol]) : void
    {
      
    }

    
  }  
}
