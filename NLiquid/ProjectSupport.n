using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Linq;
using NLiquid.Parser.Ast;

[assembly: ProjectSupport("NLiquid", typeof(NLiquid.ProjectSupport))]

namespace NLiquid
{
  class ProjectSupport : IProjectSupport
  {
    public RefreshReferences(cancellationToken : System.Threading.CancellationToken, project : Nitra.ProjectSystem.Project) : object
    {
      IgnoreParams();
      def context = DependentPropertyEvalContext();
      context
    }

    public RefreshProject(cancellationToken : System.Threading.CancellationToken, files : System.Collections.Immutable.ImmutableArray[Nitra.Declarations.FileEvalPropertiesData], data : object) : void
    {
        def context = DecomposeData(data);
        context.CancellationToken = cancellationToken;

        when (cancellationToken.IsCancellationRequested)
        return;

        def scope = TableScope("Variables");

        foreach (file in files)
            when (file.Ast is CompilationUnit as cu)
              cu.Scope = scope;

        def evalHost = ProjectEvalPropertiesHost(files);
        evalHost.EvalProperties(context, "Pass0", 0);
        evalHost.EvalProperties(context, "Pass1", 1);
    }

    public DeconstructType(symbol : Nitra.Declarations.DeclarationSymbol, _type : out Nitra.Declarations.TypeSymbol, typeArgs : out System.Collections.Immutable.ImmutableArray[Nitra.Declarations.TypeSymbol]) : bool
    {
      IgnoreParams();
      false
    }

    public GetSymbolById(data : object, symbolId : int) : ValueOption[Nitra.Declarations.DeclarationSymbol]
    {
      IgnoreParams();
      VNone()
    }

    public VisitGlobalSymbols(data : object, callback : System.Predicate[Nitra.Declarations.DeclarationSymbol]) : void
    {
      IgnoreParams();
    }

    public DecomposeData(data : object) : DependentPropertyEvalContext
    {
      data :> DependentPropertyEvalContext
    }
  }
}
