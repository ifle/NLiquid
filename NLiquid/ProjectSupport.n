using System.Threading;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using Nemerle.Imperative;

using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Reflection;

using NLiquid.Parser;
using NLiquid.Parser.Ast;
using NLiquid.Filters;

[assembly: ProjectSupport("NLiquid", typeof(NLiquid.ProjectSupport))]

namespace NLiquid
{
	class ProjectSupport : IProjectSupport
	{
		[Record]
		private class ProjectData
		{
			public Context : NLiquidDependentPropertyEvalContext;
			public Root    : NamespaceSymbol;
		}

		static NoLocation : Location       = Location(SourceSnapshot.Default.File, NSpan(0));
		static NoFile : ProjectSystem.File = SourceSnapshot.Default.File;
		static NoSpan : NSpan              = NSpan(0);

		public RefreshReferences(cancellationToken : System.Threading.CancellationToken, project : Nitra.ProjectSystem.Project) : object
		{
			IgnoreParams();
			def rootNamespace = NamespaceSymbol() <-
			{
				FullName = "<root>";
				Kind = "root";
			};
			rootNamespace.AddDeclaration(ExternalDeclaration.[NamespaceSymbol](Name(NoLocation, "<root>")));

			def globalTable     = rootNamespace.MemberTable;
			def globalTypes     = NLiquidGlobalTypes(globalTable);
			def filters         = FilterTypes.Create(globalTable, globalTypes);
			def predefinedTypes = PredefinedTypes(globalTypes, filters);

			def context = NLiquidDependentPropertyEvalContext(predefinedTypes);

			LoadUserDefinedTypes(context, rootNamespace, project);


			ProjectData(context, rootNamespace)
		}

		public RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : object) : void
		{
			def (context, root) = DecomposeData(data);
			context.CancellationToken = cancellationToken;

			when (cancellationToken.IsCancellationRequested)
				return;

			def scope = root.MemberTable;

			foreach (file in files)
				when (file.Ast is CompilationUnit as cu)
					cu.Scope = scope;

			def evalHost = ProjectEvalPropertiesHost(files, context.PredefinedTypes.Symbols);
			evalHost.EvalProperties(context, "Pass0", 0);
			evalHost.EvalProperties(context, "Pass1", 1);
		}

		LoadUserDefinedTypes(context : NLiquidDependentPropertyEvalContext, globalNamespace : NamespaceSymbol, project : Nitra.ProjectSystem.Project) : void
		{
		  def systemTypeToTypeSymbolMap = Hashtable();
		  def globalTypes = context.PredefinedTypes.GlobalTypes;
			def openNamespace(parent : NamespaceSymbol, name : string) : NamespaceSymbol
			{
				def r = Reference(Helpers.NoLocation, name);
				def result = parent.MemberTable.Bind(r);
				if (result.IsEmpty)
					Helpers.DefineSymbol.[NamespaceSymbol](name, parent.MemberTable, context);
				else
				{
					def symbols = result.GetSymbols();
					assert2(symbols.Length == 1);
					symbols[0]
				}
			}
			def tryAddType(type : System.Type) : TypeSymbol
			{
			  mutable existsSymbol;
			  when (systemTypeToTypeSymbolMap.TryGetValue(type, out existsSymbol))
					return existsSymbol;

			  when (type.IsSpecialName || !type.IsPublic || !(type.IsClass || type.IsValueType) || type.IsEnum && type.GetGenericArguments().Length > 0)
			  {
					return null;
				}

				def predefinedOpt = globalTypes.TryGetSymbol(type);
				when (predefinedOpt != null)
				{
				  systemTypeToTypeSymbolMap.Add(type, predefinedOpt);
				  return predefinedOpt;
				}

				def nsPath = type.Namespace.Split('.');
				mutable ns = globalNamespace;
				foreach (name in nsPath)
					ns = openNamespace(ns, name);
				def r = Reference(Helpers.NoLocation, type.Name);
				def result = ns.MemberTable.Bind(r);
				if (result.IsEmpty)
				{
					def symbol = Helpers.DefineSymbol.[UserDefinedTypeSymbol](type.Name, ns.MemberTable, context);
					systemTypeToTypeSymbolMap.Add(type, symbol);
					def properties = type.GetProperties();
					foreach (prop when prop.CanRead && !prop.IsSpecialName in properties)
					{
					  def getter = prop.GetGetMethod();
					  def attr = getter.Attributes;
					  when (getter.GetParameters().Length != 0 && !(attr %&& MethodAttributes.Public) && attr %&& MethodAttributes.Static)
							continue;
						def propTypeSymbol = tryAddType(prop.PropertyType);
						when (propTypeSymbol == null)
							continue;
						def propSymbol = Helpers.DefineSymbol.[PropertySymbol](prop.Name, symbol.MemberTable);
						propSymbol.Type = propTypeSymbol;
					}
					symbol // for debug purpose
				}
				else
				{
					def symbols = result.GetSymbols();
					assert2(symbols.Length == 1);
					symbols[0]
				}
			}

			foreach (lib in project.Libs)
			{
			  def asm = Assembly.ReflectionOnlyLoadFrom(lib.Path);
			  def types = asm.GetTypes();
			  foreach (type in types)
			  {
			    def typeSymbol = tryAddType(type);
			    _ = typeSymbol;
			  }
			}
		}

		public DeconstructType(symbol : DeclarationSymbol, _type : out TypeSymbol, typeArgs : out ImmutableArray[TypeSymbol]) : bool
		{
			IgnoreParams();
			false
		}

		public GetSymbolById(data : object, symbolId : int) : ValueOption[DeclarationSymbol]
		{
			IgnoreParams();
			VNone()
		}

		public VisitGlobalSymbols(data : object, callback : Predicate[DeclarationSymbol]) : void
		{
			IgnoreParams();
		}

		DecomposeData(data : object) : ProjectData
		{
			data :> ProjectData
		}
	}
}
