using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using Nitra;
using Nitra.Declarations;

using NLiquid.Parser;
using NLiquid.Parser.Ast;
using NLiquid.Filters;

namespace NLiquid
{
	public class PredefinedTypes
	{
		public GlobalTypes: NLiquidGlobalTypes;
		public Filters: FilterTypes;
		public DotNetTypesMap: Dictionary[TypeSymbol, System.Type] = Dictionary();
		public Symbols: ImmutableArray[DeclarationSymbol];

		public this(globalTypes: NLiquidGlobalTypes, filters: FilterTypes)
		{
			GlobalTypes = globalTypes;
			Filters     = filters;
			DotNetTypesMap = Dictionary();
			def builder = ImmutableArray.CreateBuilder(globalTypes.Types.Length + filters.Filters.Length);
			builder.AddRange(globalTypes.Types);
			builder.AddRange(filters.Filters);
			AddDotNetTypes(GlobalTypes.DotNetTypesMap);
			Symbols = builder.ToImmutableArray();
		}

		public AddDotNetTypes(types: Dictionary[TypeSymbol, System.Type]): void
		{
			when(types != null)
			{
			    foreach(type in types)
			    {
						DotNetTypesMap[type.Key] = type.Value;
			    }
			}

		}
		public GetDotNetType(typeSymbol: TypeSymbol): System.Type
		{
				mutable type: System.Type;
		    def _ = DotNetTypesMap.TryGetValue(typeSymbol, out type);
		    type;
		}
	}
}
