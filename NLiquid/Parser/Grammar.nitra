
namespace NLiquid.Parser.Syntax
{
	[ExplicitSpaces]
	syntax module Grammar
	{
		using Nitra.Core;
		using Nitra.CStyleComments;
		using Nitra.Identifiers;

		keyword regex ['a'..'z', '_']+ rule S;
		token Reference		= IdentifierBody;
		token Name			= IdentifierBody;
		literal Op			= "==", "!=", "<=", "<", ">=", ">", "or", "and", "contains";
		literal OpenTag           = "{%";
		literal CloseTag          = "%}";
		extend token IgnoreToken
		{
			| SpaceToken = Spaces;			
		}	
		
		syntax Statements = Statement*;

		syntax Statement
		{
			| Plain = (!TagStart Any)+
				{
					regex TagStart = "{{" | "{%"; // | ну и так далее, если в грамматике еще что-то есть;
				}
			| Comment 	= MultiLineComment
			| If      	= "{%" s sm "if" s sm  Expr s sm "%}" s sm TrueBranch=Statement* s sm 
						  ElseIf=(ElseIf*) s sm
						  Else=(Else?) s sm
						  "{%" s sm "endif" s sm "%}"
			
			| Output      = "{{" s sm OutputExpr s sm  "}}"
			| Assignment  = "{%" s sm "assign" s sm Name s sm "=" s sm FilteredExpr s "%}"
		}		
						 									 
		syntax ElseIf	= "{%" s sm "elsif" s sm  Expr s sm "%}" s sm ElseTrueBranch=Statement*;
		syntax Else		= "{%" s sm "else"  s sm            "%}" s sm ElseBranch=Statement*;

		[SpanClass(MultilineComment)] 
		syntax MultiLineComment  = Start s sm "comment" s sm End s sm Body=(!"{%" Any)* s sm Start s sm "endcomment" s sm End 
		{
			[SpanClass(OpenBrace)]
			regex Start = "{%";

			[SpanClass(CloseBrace)]
			regex End = "%}";
		}

		// Следующее правило можно выбросить. Оно нужно для более качественного детектирования ошибок в случае, 
		// если пользователь накосячит с выражением.
		syntax OutputExpr
		{
			| FilteredExpr
			| Error = !(FilteredExpr s "}}") (!"}}" Any)+
		}

		syntax Expr
		{
			| Reference
			| SStr = "'" Value=(!"'" Any)* "'"
			| DStr = '"' Value=(!'"' Any)* '"'

			// сюда над добавить остальные выражения.

		precedence Primary:
			| MemberAccess =  Expr s "." s Reference
		}

		syntax FilteredExpr
		{
		  | Expr
		precedence Filters:
		  | Filter1 = FilteredExpr s sm "|" s sm Reference
		  | Filter2 = FilteredExpr s sm "|" s sm Reference s ":" s sm Args=(Expr; s "," s sm; ?)*
		}
	}
}

