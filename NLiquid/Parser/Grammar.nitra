
namespace NLiquid.Parser.Syntax
{
	[ExplicitSpaces]
	syntax module Grammar
	{
		using Nitra.Core;
		using Nitra.CStyleComments;
		using Nitra.Identifiers;

		[SpanClass(OpenBrace)]  regex OpenTag  = "{%";
		[SpanClass(CloseBrace)] regex CloseTag = "%}";

		[SpanClass(OpenBrace)]  regex OpenOutput  = "{{";
		[SpanClass(CloseBrace)] regex CloseOutput = "}}";

		keyword regex ['a'..'z', '_']+ rule S;
		regex DecimalDigit = ['0'..'9'];
		regex Keyword      = "true" | "false";

		token Reference    = !Keyword IdentifierBody;
		token Name         = !Keyword IdentifierBody;
		[SpanClass(String)]
		token StringSingleQuoteLiteral = "'" Value=(!"'" Any)* "'";
		[SpanClass(String)]
		token StringDoubleQuoteLiteral = '"' Value=(!'"' Any)* '"';

		literal Op      = "==", "!=", "<=", "<", ">=", ">", "or", "and", "contains";

		extend token IgnoreToken
		{
			| SpaceToken = Spaces;
		}

		syntax Blocks = Block*;

		syntax Block
		{
			| Plain = (!TagStart Any)+
				{
					regex TagStart = "{{" | "{%";
				}
			| Comment = MultiLineComment
			| If      =
				OpenTag s sm "if" s sm  Expr s sm CloseTag s sm
					TrueBranch=Block* s sm
				ElseIf* s sm
				Else? s sm
				OpenTag s sm "endif" s sm CloseTag

			| Unless      = OpenTag s sm "unless" s sm  Expr s sm CloseTag s sm Body=Block* s sm OpenTag s sm "endunless" s sm CloseTag
			| Output      = OpenOutput s sm OutputExpr s sm  CloseOutput
			| Assignment  = OpenTag s sm "assign" s sm Name s sm "=" s sm FilteredExpr s CloseTag
			| Capture     = OpenTag s sm "capture" s sm  Name s sm CloseTag s sm Body=Block* s sm OpenTag s sm "endcapture" s sm CloseTag
		}

		syntax ElseIf = OpenTag s sm "elsif" s sm  Expr s sm CloseTag s sm ElseTrueBranch=Block*;
		syntax Else   = OpenTag s sm "else"  s sm            CloseTag s sm ElseBranch=Block*;

		[SpanClass(MultilineComment)]
		syntax MultiLineComment  = OpenTag s sm "comment" s sm CloseTag s sm Body=(!OpenTag Any)* s sm OpenTag s sm "endcomment" s sm CloseTag;

		syntax OutputExpr
		{
			| FilteredExpr
			| Error = !(FilteredExpr s "}}") (!"}}" Any)+
		}

		syntax Expr
		{
			| "true"
			| "false"
			| [SpanClass(Number)]
			  Number = Digits
			  {
				regex Digits = ("+" | "-")? DecimalDigit+ ("." DecimalDigit+)?;
			  }
			| Reference
			| [SpanClass(String)] SStr = "'" Value=(!"'" Any)* "'"
			| [SpanClass(String)] DStr = '"' Value=(!'"' Any)* '"'

		precedence Or:
			| Or           = Expr s sm "or" s sm Expr
		precedence And:
			| And          = Expr s sm "and" s sm Expr
		precedence Contains:
			| Contains     = Expr s sm "contains" s sm Expr
		precedence Equal:
			| Equal        = Expr s sm "==" s sm Expr
			| NotEqual     = Expr s sm "!=" s sm Expr
		precedence Primary:
			| MemberAccess =  Expr s "." s Reference
		}

		syntax FilteredExpr
		{
			| Expr
		precedence Filters:
			| FilterWithoutArgs = FilteredExpr s sm "|" s sm Reference
			| FilterWithArgs    = FilteredExpr s sm "|" s sm Reference s ":" s sm Args=(Expr; s "," s sm; ?)*
		}
	}
}

