using Nitra;
using Nitra.Declarations;
using NLiquid.Parser.Syntax;
using NLiquid.Parser.Ast;
namespace NLiquid.Parser.Mapping
{
  map syntax Grammar.Reference -> Reference = Reference(this);
  map syntax Grammar.Name      -> Name      = Name(this);

	map syntax Grammar.Contents -> CompilationUnit
	{
		Contents -> Statements;
	}

	map syntax Grammar.Content.Atom -> Statement
  {
    Atom // forwarding value through
  }

	map syntax Grammar.Content -> Statement
	{
		| Plain -> Plain {}
	}

  map syntax Grammar.Atom -> Statement
  {
    | Tag    -> Plain  { } // temporary use Plain!
    | Output -> Output { OutputExpr -> Expr; }
  }

  map syntax Grammar.Atom.Assignment -> Statement
  {
    Assignment { Name -> Name; FilteredExpr -> Initializer; }
  }

  map syntax Grammar.OutputExpr.FilteredExpr -> Expr
  {
    FilteredExpr // forwarding value through
  }

  map syntax Grammar.OutputExpr -> Expr
  {
    | Error -> Error { }
  }

  map syntax Grammar.FilteredExpr.Expr -> Expr
  {
    Expr // forwarding value through
  }

  map syntax Grammar.Expr -> Expr
  {
    | SStr         -> SStr { Value = ParsedValue(Value, GetText(Value)); }
    | DStr         -> DStr { Value = ParsedValue(Value, GetText(Value)); }
    | Reference    -> Ref  { Reference -> Reference; }
    | MemberAccess -> MemberAccess { Expr -> Qualifier; Reference -> Reference; }
  }

  map syntax Grammar.FilteredExpr -> Expr
  {
    | Filter1      -> Call { FilteredExpr -> Func; [] -> Args; }
    | Filter2      -> Call { FilteredExpr -> Func; Args.Item1 -> Args; }
  }
}
