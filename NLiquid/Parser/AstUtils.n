using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Linq;

using NLiquid.Parser.Ast;

namespace NLiquid.Parser
{
    /// <summary>
    /// Description of AstUtils.
    /// </summary>
    module AstUtils
    {
        public GetNilSymbol(this ctx: DependentPropertyEvalContext): NilSymbol               { GetContext(ctx).Nil        }
        public GetNumberSymbol(this ctx: DependentPropertyEvalContext): NumberSymbol         { GetContext(ctx).Number     }
        public GetBooleanSymbol(this ctx: DependentPropertyEvalContext): BooleanSymbol       { GetContext(ctx).Boolean    }
        public GetStringSymbol(this ctx: DependentPropertyEvalContext): StringSymbol         { GetContext(ctx).String     }
        public GetObjectSymbol(this ctx: DependentPropertyEvalContext): ObjectSymbol         { GetContext(ctx).Object     }
        public GetArraySymbol(this ctx: DependentPropertyEvalContext): ArraySymbol           { GetContext(ctx).Array      }
        public GetDictionarySymbol(this ctx: DependentPropertyEvalContext): DictionarySymbol { GetContext(ctx).Dictionary }

        GetContext(ctx: DependentPropertyEvalContext): NLiquidDependentPropertyEvalContext
        {
            ctx :> NLiquidDependentPropertyEvalContext
        }

        //// Hack: Nitra dependent property not support (yet) of indexer access.
        //public GetParameterType(func : FunDeclarationSymbol, index : int) : TypeSymbol
        //{
        //    def parameters = func.Parameters;
        //    if (index < parameters.Length && parameters[index].IsTypeEvaluated)
        //    parameters[index].Type
        //    else
        //    MiniCTypeUnifier.Instance.CreateTypeVar() // Use TypeVar to prevent phantom type mismatch error messages.
        //}
    }
}
