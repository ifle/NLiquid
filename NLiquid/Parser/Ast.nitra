using Nitra;
using Nitra.Declarations;
using Nitra.Runtime;
using NLiquid;
using System.IO;

namespace NLiquid.Parser.Ast
{
	ast CompilationUnit : BindableAst, LocalVariableScope
	{
		Statements.CurrentTable = LocalVariables;
		Statements.Scope = Scope.HideWith(LocalVariables);

		Statements : Statement*;
	}

	abstract ast LocalVariableScope
	{
		out LocalVariables : TableScope = TableScope("Local variables");
	}

	abstract ast Statement : BindableAst
	{
		in CurrentTable : TableScope;

		| Plain  { }
		| Comment { }
		| Output
		 {
			Expr.Scope = Scope;

			Expr : Expr;
		 }
		| If : LocalVariableScope
		 {
			CurrentTable         = LocalVariables;
			// протаскиваем текущую таблицу имен во вложенные блоки
			Body.CurrentTable    = CurrentTable;
			ElseIfs.CurrentTable = CurrentTable;
			Else.CurrentTable    = CurrentTable;
			Body.Scope           = Scope.HideWith(LocalVariables); // скрываем скопом локальных переменных скопы сформированные выше.
			Condition.Scope      = Scope;
			ElseIfs.Scope        = Scope;
			Else.Scope           = Scope;

			Condition : Expr;
			Body      : Statement*;
			ElseIfs   : ElseIf*;
			Else      : Else?;
		 }
		| Unless : LocalVariableScope
		 {
			CurrentTable      = LocalVariables;
			Body.CurrentTable = CurrentTable;
			Body.Scope        = Scope.HideWith(LocalVariables);
			Condition.Scope   = Scope;

			Condition : Expr;
			Body      : Statement*;
		 }
	}

	ast ElseIf : Statement, LocalVariableScope
	{
		CurrentTable      = LocalVariables;
		Body.CurrentTable = CurrentTable;
		Body.Scope        = Scope.HideWith(LocalVariables);
		Condition.Scope   = Scope;

		Condition : Expr;
		Body      : Statement*;
	}

	ast Else : Statement, LocalVariableScope
	{
		CurrentTable      = LocalVariables;
		Body.CurrentTable = CurrentTable;
		Body.Scope        = Scope.HideWith(LocalVariables);

		Body: Statement*;
	}

	declaration Assignment : Statement
	{
		ContainingTable   = CurrentTable; // говорим в какой таблице определять переменную
		Initializer.Scope = Scope;

		Initializer : Expr;
	}

	abstract ast Binary : Expr
	{
		Expr1.Scope = Scope;
		Expr2.Scope = Scope;

		Expr1 : Expr;
		Expr2 : Expr;
	}

	abstract ast EqualExpr : Binary
	{
	}

	abstract ast OrAndExpr : Binary
	{
	}

	abstract ast ContainsExpr : Binary
	{
	}

	abstract ast Expr : BindableAst
	{
		| SStr         { Value : string; }
		| DStr         { Value : string; }
		| Ref
		 {
			Reference.Scope = Scope;

			Reference : Reference;
		 }
		| MemberAccess
		 {
			Qualifier.Scope = Scope;
			Reference.Scope = Scope;

			Qualifier : Expr;
			Reference : Reference;
		 }
		| Error        { Error(context, "Expected: Expr '}}'"); }
		| Call
		 {
			Func.Scope = Scope;
			Args.Scope = Scope;

			Func : Expr;
			Args : Expr*;
		 }
		| Or           : OrAndExpr {}
		| And          : OrAndExpr {}
		| Contains     : ContainsExpr {}
		| Equal        : EqualExpr{ }
		| NotEqual     : EqualExpr{ }
	}
}
