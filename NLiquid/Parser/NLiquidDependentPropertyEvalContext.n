using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using NLiquid.Parser.Ast;

namespace NLiquid
{
	public class NLiquidDependentPropertyEvalContext : DependentPropertyEvalContext
	{
		public Nil         : NilSymbol;
		public Number      : NumberSymbol;
		public Boolean     : BooleanSymbol;
		public String      : StringSymbol;
		public Object      : ObjectSymbol;
		public Array       : ArraySymbol;
		public Dictionary  : DictionarySymbol;

		_functions   : array[FunSymbol];

		public this(nil : NilSymbol, number : NumberSymbol, boolean : BooleanSymbol, @string : StringSymbol, @object : ObjectSymbol, @array : ArraySymbol, dictionary : DictionarySymbol, params functions : array[FunSymbol])
		{
			Nil        = nil;
			Number     = number;
			Boolean    = boolean;
			String     = @string;
			Object     = @object;
			Array      = @array;
			Dictionary = dictionary;
			_functions = functions;

			def named   = array[nil : DeclarationSymbol, number, boolean, @string, @object, @array, @dictionary];
			def builder = ImmutableArray.CreateBuilder(named.Length + _functions.Length);
			builder.AddRange(named);
			builder.AddRange(_functions);
			this.PredefinedSymbols = builder.MoveToImmutable();
		}

		public PredefinedSymbols : ImmutableArray[DeclarationSymbol] { get; }
	}
}
